{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  let svgInput = \"\";\n  let swiftOutput = \"\";\n  let size = {};\n\n  const moveToSwiftString = point => `path.move(to: CGPoint(x: ${point.x/size.width}*width, y: ${point.y/size.height}*height))`;\n  const lineToSwiftString = point => `path.addLine(to: CGPoint(x: ${point.x/size.width}*width, y: ${point.y/size.height}*height))`;\n  const closePathSwiftString = point => \"path.closeSubpath()\";\n  const curveToSwiftString = pts => {\n    return [`path.addCurve(to: CGPoint(x: ${pts.p.x/size.width}*width, y: ${pts.p.y/size.height}*height),`,\n    `control1: CGPoint(x: ${pts.c1.x/size.width}*width, y: ${pts.c1.y/size.height}*height),`,\n    `control2: CGPoint(x: ${pts.c2.x/size.width}*width, y: ${pts.c2.y/size.height}*height))`\n    ].join(\" \")\n  }\n\n\n  const generateFinalSwiftString = (props) => {\n    const points = [...props.points];\n    let swiftPoints = [];\n\n    for (let i = 0; i < points.length; i++) {\n      const p = points[i];\n      switch(p.flag) {\n        case \"M\":\n          swiftPoints.push(moveToSwiftString(p));\n          break;\n        case \"L\":\n          swiftPoints.push(lineToSwiftString(p));\n          break;\n\n        case \"C\":\n          const c1 = points[i+1];\n          const c2 = points[i+2];\n\n          swiftPoints.push(curveToSwiftString({ p: c2, c1: p, c2: c1 }));\n\n          break;\n\n        case \"Z\":\n          swiftPoints.push(closePathSwiftString(p));\n          break;\n\n        case \"H\":\n          console.log(\"Horizontal lines are not implemented!\")\n          break;\n\n        case \"V\":\n          console.log(\"Vertical lines are not implemented!\")\n          break;\n\n        case \"S\":\n          console.log(\"S lines are not implemented!\")\n          break;\n\n        case \"Q\":\n          console.log(\"Q lines are not implemented!\")\n          break;\n\n        case \"T\":\n          console.log(\"T lines are not implemented!\")\n          break;\n\n        case \"A\":\n          console.log(\"A lines are not implemented!\")\n          break;\n        default:\n          console.log(\"HMMMMMmmmmm\");\n      }\n    }\n\n    console.log(swiftPoints)\n\n    return [\n      `struct ${props.title}: Shape {`,\n      `    func path(in rect: CGRect) -> Path {`,\n      `        var path = Path()`,\n      `        let width = rect.size.width`,\n      `        let height = rect.size.height`,\n      ``,\n      ...swiftPoints.map(v => \"        \"+v),\n      ``,\n      `        return path`,\n      `    }`,\n      `}`\n    ].join('\\n');\n  }\n\n  const getPathIndex = text => {\n    console.log(text);\n    const pattern = /\\<path(.|\\n|\\r)*((\\><\\/path\\>)|(\\/\\>))/;\n    const regex = RegExp(pattern);\n    return regex.exec(text);\n  };\n\n  const getDataString = text => {\n    console.log(text);\n    const pattern = /\\sd\\=\\\"(.|\\n|\\r)+\\\"(\\s|\\>)(?!\\<\\/path\\>)/;\n    const regex = RegExp(pattern);\n    return regex.exec(text);\n  };\n\n  const getPoints = text => {\n    text = String(text).trim();\n    const s_points = String(text).split(\" \");\n    return s_points.map(val => {\n      let flag = \"\";\n      if (RegExp(/^\\D/).test(val[0])) {\n        flag = val[0];\n        val = val.substring(1);\n      }\n\n      const nums = String(val)\n        .split(\",\")\n        .map(s_num => parseFloat(s_num));\n\n      return { flag, x: nums[0], y: nums[1] };\n    });\n  };\n\n  const getWidthAndHeight = svg => {\n    let text = String(svg);\n\n    const widthRegex = /\\swidth\\=\\\".*\\\"/\n    const heightRegex = /\\sheight\\=\\\".*\\\"/\n\n    const widthString = String(RegExp(widthRegex).exec(text));\n    const heightString = String(RegExp(heightRegex).exec(text));\n\n    if (widthString == 'undefined' || heightString == 'undefined') {\n      // const viewBoxRegex = /\\sviewBox\\=\\\".*\\\"/\n      // TODO: Load viewBox dimensions.\n    } else {\n      return {\n        width: parseInt(widthString.substring(8, widthString.length-2)),\n        height: parseInt(heightString.substring(9, heightString.length-2))\n      }\n    }\n  };\n\n  const generateSwiftCode = () => {\n    size = getWidthAndHeight(svgInput);\n\n    console.log(size)\n\n    const pathString = getPathIndex(svgInput)[0];\n    const dataString = getDataString(pathString)[0].substring(\n      4,\n      pathString.length - 2\n    );\n    const points = getPoints(dataString);\n    console.log(points);\n\n    const swiftString = generateFinalSwiftString({\n      title: \"MyCustomShape\",\n      points\n    });\n\n    swiftOutput = swiftString;\n  };\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n    margin: 10px auto;\n  }\n\n  textarea {\n    width: 600px;\n    height: 200px;\n    max-width: 600px;\n    max-height: 200px;\n    min-width: 300px;\n    min-height: 100px;\n    font-family: \"Courier New\", Courier, monospace;\n    font-size: 10pt;\n  }\n\n  #swift-output-area {\n    max-height: 1000px;\n    height: 400px;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>Welcome!</h1>\n  <i>Functionality is very limited for now, feel free to contribute on <a href=\"https://github.com/bring-shrubbery/SVG-to-SwiftUI\" target=\"_blank\">Github</a>.</i>\n  <h2>Paste SVG code below:</h2>\n  <div>\n    <textarea bind:value={svgInput} />\n  </div>\n  <button on:click={generateSwiftCode}>Convert to SwiftUI Shape!</button>\n  <h2>Swift code wil be shown below:</h2>\n  <div>\n    <textarea value={swiftOutput} id=\"swift-output-area\"/>\n  </div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAkKE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAC9C,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,KAAK,AACf,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}